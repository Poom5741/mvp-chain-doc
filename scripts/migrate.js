#!/usr/bin/env node
const fs = require('fs')
const path = require('path')

const glob = require('glob')

const SRC = 'source_docs'
const DEST = 'docs'

function ensureDir(dir) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true })
}

function transformAdmonitions(content) {
  return content
    .replace(/^>\s*NOTE:?\s*/gm, ':::note\n')
    .replace(/^>\s*TIP:?\s*/gm, ':::tip\n')
    .replace(/^>\s*WARNING:?\s*/gm, ':::warning\n')
    .replace(/^>\s*IMPORTANT:?\s*/gm, ':::important\n')
    .replace(/\n:::note\n([^]*?)\n(?=>|$)/g, '\n:::note\n$1\n:::\n')
    .replace(/\n:::tip\n([^]*?)\n(?=>|$)/g, '\n:::tip\n$1\n:::\n')
    .replace(/\n:::warning\n([^]*?)\n(?=>|$)/g, '\n:::warning\n$1\n:::\n')
    .replace(/\n:::important\n([^]*?)\n(?=>|$)/g, '\n:::important\n$1\n:::\n')
}

function convertImages(content) {
  return content.replace(
    /!\[(.*?)\]\((\.\.\/)?assets\/(.*?)\)/g,
    (m, alt, up, file) => `![${alt}](/figures/${file})`
  )
}

function ensureUniqueHeadings(content) {
  const seen = new Map()
  return content.replace(/^(#+)\s+(.+)$/gm, (m, hashes, title) => {
    const id = title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-|-$|/g, '')
    const count = (seen.get(id) || 0) + 1
    seen.set(id, count)
    if (count === 1) return m
    return `${hashes} ${title} {#${id}-${count}}`
  })
}

function appendAnchors(content) {
  return content + '\n\n<!-- anchors: autogenerated -->\n'
}

function migrate() {
  ensureDir(DEST)
  const files = glob.sync(`${SRC}/**/*.md`)
  files.forEach(srcPath => {
    const rel = path.relative(SRC, srcPath)
    const destPath = path.join(DEST, rel).replace(/\.md$/, '.mdx')
    ensureDir(path.dirname(destPath))
    let text = fs.readFileSync(srcPath, 'utf8')
    text = transformAdmonitions(text)
    text = convertImages(text)
    text = ensureUniqueHeadings(text)
    text = appendAnchors(text)
    fs.writeFileSync(destPath, text, 'utf8')
    console.log(`Migrated: ${srcPath} -> ${destPath}`)
  })
}

if (require.main === module) migrate()
